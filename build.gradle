import com.proquest.gradle.Util

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
}

plugins {
    id 'com.proquest.codegen.CodeGenPlugin' version '1.11.21'
    id("com.proquest.gradle.NexusPublishPlugin") version "1.11.21"
    id("com.proquest.gradle.IvyPublishPlugin") version "1.11.21"
}

allprojects {

    repositories {
        mavenCentral()
    }
}

subprojects {
    apply plugin: 'java'

    sourceCompatibility = '1.7'
    targetCompatibility = '1.7'

    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

    group               = "co.paralleluniverse"
    version             = "1.0.4-SNAPSHOT"
    status              = "integration"
    description         = "Simple Java deployment"
    ext.url             = "https://github.com/puniverse/capsule"
    ext.vendor          = "Parallel Universe Software Co."
    ext.licenseName     = "Eclipse Public License - v 1.0"
    ext.licenseUrl      = "http://www.eclipse.org/legal/epl-v10.html"
    ext.scmUrl          = "https://github.com/puniverse/capsule"
    ext.scmConnection   = "https://github.com/puniverse/capsule.git"
    ext.distDir         = "$buildDir/dist"
    ext.isReleaseVersion = !version.endsWith("SNAPSHOT")

    // User and Password are taken from ~/.gradle/gradle.properties
    if (!project.hasProperty("sonatypeUsername") || !project.hasProperty("sonatypePassword")) {
        println "sonatype username or password not set"
        ext.sonatypeUsername = ""
        ext.sonatypePassword = ""
    }

    configurations {
        javancss
    }

    configurations {
        [compile, runtime]*.resolutionStrategy {
            failOnVersionConflict()
        }
    }

    dependencies {
        testCompile 'junit:junit:4.12'
        testCompile 'org.truth0:truth:0.23'
        testCompile 'com.google.jimfs:jimfs:1.1'
        testCompile 'org.jooq:joor:0.9.6'
        javancss 'org.codehaus.javancss:javancss:33.54'
    }

    test {
        systemProperty "java.protocol.handler.pkgs", "co.paralleluniverse.filesystem"

        beforeTest { desc ->
            logger.quiet("Running test: " + desc)
        }

        afterTest { desc, result ->
            if(result.resultType == TestResult.ResultType.FAILURE) {
                logger.quiet("Failed test ${desc.name} [${desc.className}] with exception: ${result.exception}")
                if(result.exception != null) {
                    result.exception.printStackTrace()
                }
            }
        }
    }

    task run(type: JavaExec, dependsOn:[testClasses]) {
        classpath = sourceSets.main.runtimeClasspath
        if(project.hasProperty('mainClass')){
            main = project.mainClass
        }
        if(project.hasProperty('args')){
            args project.args.split('\\s+')
        }
    }

    tasks.withType(JavaExec) {
        classpath += sourceSets.test.runtimeClasspath
    }

    javadoc {
        options.links = [ "http://docs.oracle.com/javase/7/docs/api/" ]
    }

    task sourcesJar(type: Jar, dependsOn: classes) {
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        from javadoc.destinationDir
    }

    task javancss(dependsOn: 'classes') {
        doLast {
            ant {
                logging.level = LogLevel.INFO
                taskdef(name: 'javancss', classname: 'javancss.JavancssAntTask', classpath: configurations.javancss.asPath)
                javancss(
                        srcdir: 'src/main/java',
                        abortOnFail: 'true',
                        generateReport: 'true',
                        packageMetrics: 'true',
                        classMetrics: 'false',
                        functionMetrics: 'false'
                        // outputFile: reportName,
                )
            }
        }
    }

    assemble.dependsOn javancss

    ///////// Publish Artifacts
    apply plugin: 'maven'
    apply plugin: 'signing'

    artifacts {
        archives jar
        archives sourcesJar
        archives javadocJar
    }

    signing {
        required { isReleaseVersion && gradle.taskGraph.hasTask("uploadArchives") }
        sign configurations.archives
    }

    defaultTasks 'build'
}

project (':capsule') {
    dependencies {
        testCompile project(':capsule-util')
    }

    jar {
        manifest {
            attributes('Main-Class'    : 'Capsule',
                       'Premain-Class' : 'Capsule')
        }
    }

    javadoc {
        options.noDeprecated = true
        excludes = [ "capsule/**" ]
    }
}

project (':capsule-util') {
    dependencies {
        runtime project(':capsule')
        compile files("${System.getProperty('java.home')}/../lib/tools.jar")
    }

    javadoc {
        excludes = ["co/paralleluniverse/common/**",
                    "co/paralleluniverse/filesystem/**"
        ]
    }
}